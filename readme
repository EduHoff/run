# üöÄ RUN - Universal Build and Execution Helper

(temporary name ‚Äî subject to change)

**Run** is a Bash script that provides a unified interface for compiling, executing, and interpreting source files across multiple programming languages. It automatically detects project types and build configurations, offering a consistent development workflow regardless of the language used.

---

## ‚ú® Features

**Multi-language support**: Unified commands for **20+ languages**
**Smart detection**: Automatically identifies project types and build systems
**Advanced Java support**: Handles Maven, Gradle, and manual projects
**Simple interface**: Consistent commands across all languages
**Zero configuration**: Works out-of-the-box for most projects

---

## üì• Installation

*(Coming soon ‚Äî instructions for global installation)*

---

## üöÄ Usage

### Basic Syntax

```bash
run [OPTIONS] <file_or_directory>
```

### General Options

| Option          | Description                            |
| --------------- | -------------------------------------- |
| `run <file>`    | Compile and execute (default behavior) |
| `run -c <file>` | Compile only                           |
| `run -e <file>` | Execute only (already compiled)        |
| `run -i <file>` | Interpret only (for script languages)  |

### Java Project Options

| Option                | Description                   |
| --------------------- | ----------------------------- |
| `run --java <dir>`    | Compile and run Java project  |
| `run -c --java <dir>` | Compile Java project only     |
| `run -e --java <dir>` | Run compiled Java project     |
| `run -i --java <dir>` | Run classes directly (no JAR) |

---

## üåê Supported Languages

| Language                 | Compiler/Interpreter | Project Detection           |
| ------------------------ | -------------------- | --------------------------- |
| **C**                    | gcc                  | Single file                 |
| **C++**                  | g++                  | Single file                 |
| **C#**                   | dotnet               | `.csproj`                   |
| **F#**                   | dotnet               | `.fsproj`, `.fsx`           |
| **Java**                 | javac/java           | Manual, Maven, Gradle       |
| **Kotlin**               | kotlinc/java         | Single file, `.kt` / `.kts` |
| **Groovy**               | groovyc/groovy       | Single file                 |
| **Swift**                | swift/swiftc         | Single file                 |
| **Go**                   | go                   | Single file                 |
| **Rust**                 | rustc/cargo          | Single file, `Cargo.toml`   |
| **Haskell**              | ghc/runhaskell       | Single file                 |
| **TypeScript**           | tsc/node             | Single file                 |
| **JavaScript**           | node                 | Single file                 |
| **Python**               | python3              | Single file                 |
| **Ruby**                 | ruby                 | Single file                 |
| **Lua**                  | lua                  | Single file                 |
| **PHP**                  | php                  | Single file                 |
| **Perl**                 | perl                 | Single file                 |
| **R**                    | Rscript              | Single file                 |
| **Julia**                | julia                | Single file                 |
| **Zig**                  | zig                  | Single file                 |
| **Dart**                 | dart                 | Single file                 |
| **Fortran**              | gfortran             | Single file                 |
| **Cobol**                | cobc                 | Single file                 |
| **Assembly (x86/Linux)** | nasm/gcc/ld          | Single file                 |
| **Shell**                | bash                 | Single file                 |

---

## ‚òï Java Project Support

### Project Types

* **üìÅ Manual Projects**: Directories with `.java` files organized in `src/`
* **üêò Maven Projects**: Detected via `pom.xml`
* **ü¶Å Gradle Projects**: Detected via `build.gradle` or `build.gradle.kts`

### Automatic Features

* üîç **Main class detection** (entry point)
* üì¶ **Automatic JAR creation** with proper manifest
* üèóÔ∏è **Dependency management** (libraries in `lib/` or specified paths)
* üìÇ **Organized compilation** into `bin/` directory

---

## üí° Examples

### General Usage

```bash
# C - compile and run
run program.c

# Rust - compile only
run -c main.rs

# Python - interpret
run -i script.py

# Run precompiled binary
run -e myapp
```

### Java Projects

```bash
# Auto-detect and run Java project
run --java .

# Compile Maven project only
run -c --java ./my-project

# Run existing Gradle project
run -e --java ./gradle-project

# Run classes directly without JAR
run -i ./src
```

---

## üìä Exit Codes

| Code | Meaning                                                  |
| ---- | -------------------------------------------------------- |
| `0`  | Success                                                  |
| `1`  | General error (compilation failed, file not found, etc.) |
| `2`  | Usage error (invalid options or arguments)               |

---

## ‚öôÔ∏è Requirements

### Core Dependencies

* **Bash** 4.0+
* Standard language toolchains installed

### Examples of Language-Specific Requirements

* **C/C++**: gcc/g++
* **.NET**: SDK installed (C#, F#)
* **Java**: JDK 8+
* **Rust**: rustc/cargo
* **Python**: python3
* **Haskell**: ghc
* **Node.js**: node/npm

